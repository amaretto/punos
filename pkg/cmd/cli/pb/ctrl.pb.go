// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctrl.proto

package ctrl

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TTRegistRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTRegistRequest) Reset()         { *m = TTRegistRequest{} }
func (m *TTRegistRequest) String() string { return proto.CompactTextString(m) }
func (*TTRegistRequest) ProtoMessage()    {}
func (*TTRegistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{0}
}

func (m *TTRegistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TTRegistRequest.Unmarshal(m, b)
}
func (m *TTRegistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TTRegistRequest.Marshal(b, m, deterministic)
}
func (m *TTRegistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTRegistRequest.Merge(m, src)
}
func (m *TTRegistRequest) XXX_Size() int {
	return xxx_messageInfo_TTRegistRequest.Size(m)
}
func (m *TTRegistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TTRegistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TTRegistRequest proto.InternalMessageInfo

func (m *TTRegistRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TTRegistResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTRegistResult) Reset()         { *m = TTRegistResult{} }
func (m *TTRegistResult) String() string { return proto.CompactTextString(m) }
func (*TTRegistResult) ProtoMessage()    {}
func (*TTRegistResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{1}
}

func (m *TTRegistResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TTRegistResult.Unmarshal(m, b)
}
func (m *TTRegistResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TTRegistResult.Marshal(b, m, deterministic)
}
func (m *TTRegistResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTRegistResult.Merge(m, src)
}
func (m *TTRegistResult) XXX_Size() int {
	return xxx_messageInfo_TTRegistResult.Size(m)
}
func (m *TTRegistResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TTRegistResult.DiscardUnknown(m)
}

var xxx_messageInfo_TTRegistResult proto.InternalMessageInfo

func (m *TTRegistResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type GetTTCmdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTTCmdRequest) Reset()         { *m = GetTTCmdRequest{} }
func (m *GetTTCmdRequest) String() string { return proto.CompactTextString(m) }
func (*GetTTCmdRequest) ProtoMessage()    {}
func (*GetTTCmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{2}
}

func (m *GetTTCmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTTCmdRequest.Unmarshal(m, b)
}
func (m *GetTTCmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTTCmdRequest.Marshal(b, m, deterministic)
}
func (m *GetTTCmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTTCmdRequest.Merge(m, src)
}
func (m *GetTTCmdRequest) XXX_Size() int {
	return xxx_messageInfo_GetTTCmdRequest.Size(m)
}
func (m *GetTTCmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTTCmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTTCmdRequest proto.InternalMessageInfo

func (m *GetTTCmdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TTCmd struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Param                string   `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTCmd) Reset()         { *m = TTCmd{} }
func (m *TTCmd) String() string { return proto.CompactTextString(m) }
func (*TTCmd) ProtoMessage()    {}
func (*TTCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{3}
}

func (m *TTCmd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TTCmd.Unmarshal(m, b)
}
func (m *TTCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TTCmd.Marshal(b, m, deterministic)
}
func (m *TTCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTCmd.Merge(m, src)
}
func (m *TTCmd) XXX_Size() int {
	return xxx_messageInfo_TTCmd.Size(m)
}
func (m *TTCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_TTCmd.DiscardUnknown(m)
}

var xxx_messageInfo_TTCmd proto.InternalMessageInfo

func (m *TTCmd) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *TTCmd) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

type CtrlRegistRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlRegistRequest) Reset()         { *m = CtrlRegistRequest{} }
func (m *CtrlRegistRequest) String() string { return proto.CompactTextString(m) }
func (*CtrlRegistRequest) ProtoMessage()    {}
func (*CtrlRegistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{4}
}

func (m *CtrlRegistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlRegistRequest.Unmarshal(m, b)
}
func (m *CtrlRegistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlRegistRequest.Marshal(b, m, deterministic)
}
func (m *CtrlRegistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlRegistRequest.Merge(m, src)
}
func (m *CtrlRegistRequest) XXX_Size() int {
	return xxx_messageInfo_CtrlRegistRequest.Size(m)
}
func (m *CtrlRegistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlRegistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlRegistRequest proto.InternalMessageInfo

func (m *CtrlRegistRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CtrlRegistResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlRegistResult) Reset()         { *m = CtrlRegistResult{} }
func (m *CtrlRegistResult) String() string { return proto.CompactTextString(m) }
func (*CtrlRegistResult) ProtoMessage()    {}
func (*CtrlRegistResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{5}
}

func (m *CtrlRegistResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlRegistResult.Unmarshal(m, b)
}
func (m *CtrlRegistResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlRegistResult.Marshal(b, m, deterministic)
}
func (m *CtrlRegistResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlRegistResult.Merge(m, src)
}
func (m *CtrlRegistResult) XXX_Size() int {
	return xxx_messageInfo_CtrlRegistResult.Size(m)
}
func (m *CtrlRegistResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlRegistResult.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlRegistResult proto.InternalMessageInfo

func (m *CtrlRegistResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type TTCmdRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Param                string   `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTCmdRequest) Reset()         { *m = TTCmdRequest{} }
func (m *TTCmdRequest) String() string { return proto.CompactTextString(m) }
func (*TTCmdRequest) ProtoMessage()    {}
func (*TTCmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{6}
}

func (m *TTCmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TTCmdRequest.Unmarshal(m, b)
}
func (m *TTCmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TTCmdRequest.Marshal(b, m, deterministic)
}
func (m *TTCmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTCmdRequest.Merge(m, src)
}
func (m *TTCmdRequest) XXX_Size() int {
	return xxx_messageInfo_TTCmdRequest.Size(m)
}
func (m *TTCmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TTCmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TTCmdRequest proto.InternalMessageInfo

func (m *TTCmdRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *TTCmdRequest) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

type TTCmdResult struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TTCmdResult) Reset()         { *m = TTCmdResult{} }
func (m *TTCmdResult) String() string { return proto.CompactTextString(m) }
func (*TTCmdResult) ProtoMessage()    {}
func (*TTCmdResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0572e205f89e843, []int{7}
}

func (m *TTCmdResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TTCmdResult.Unmarshal(m, b)
}
func (m *TTCmdResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TTCmdResult.Marshal(b, m, deterministic)
}
func (m *TTCmdResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TTCmdResult.Merge(m, src)
}
func (m *TTCmdResult) XXX_Size() int {
	return xxx_messageInfo_TTCmdResult.Size(m)
}
func (m *TTCmdResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TTCmdResult.DiscardUnknown(m)
}

var xxx_messageInfo_TTCmdResult proto.InternalMessageInfo

func (m *TTCmdResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*TTRegistRequest)(nil), "TTRegistRequest")
	proto.RegisterType((*TTRegistResult)(nil), "TTRegistResult")
	proto.RegisterType((*GetTTCmdRequest)(nil), "GetTTCmdRequest")
	proto.RegisterType((*TTCmd)(nil), "TTCmd")
	proto.RegisterType((*CtrlRegistRequest)(nil), "CtrlRegistRequest")
	proto.RegisterType((*CtrlRegistResult)(nil), "CtrlRegistResult")
	proto.RegisterType((*TTCmdRequest)(nil), "TTCmdRequest")
	proto.RegisterType((*TTCmdResult)(nil), "TTCmdResult")
}

func init() { proto.RegisterFile("ctrl.proto", fileDescriptor_a0572e205f89e843) }

var fileDescriptor_a0572e205f89e843 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x4a, 0xc3, 0x40,
	0x10, 0x45, 0xb3, 0xd1, 0x86, 0xf4, 0x5a, 0xdb, 0x74, 0x10, 0x29, 0x79, 0xd2, 0x15, 0x21, 0x88,
	0x4c, 0x45, 0xd1, 0x1f, 0xe8, 0x83, 0xef, 0x71, 0x7f, 0xa0, 0x36, 0x8b, 0x04, 0x12, 0x5b, 0x37,
	0xdb, 0x5f, 0xf4, 0xbb, 0x24, 0x9b, 0x16, 0x9b, 0x88, 0xa1, 0x6f, 0x33, 0x99, 0x3b, 0x77, 0x6e,
	0x0e, 0x0b, 0xac, 0xac, 0x29, 0x78, 0x63, 0xd6, 0x76, 0x2d, 0xaf, 0x31, 0x51, 0x2a, 0xd5, 0x1f,
	0x79, 0x65, 0x53, 0xfd, 0xb5, 0xd5, 0x95, 0xa5, 0x31, 0xfc, 0x3c, 0x9b, 0x89, 0x2b, 0x91, 0x0c,
	0x53, 0x3f, 0xcf, 0x64, 0x82, 0xf1, 0xaf, 0xa4, 0xda, 0x16, 0x96, 0x2e, 0x11, 0x18, 0x57, 0x39,
	0x55, 0x98, 0xee, 0xba, 0xda, 0xec, 0x55, 0x5b, 0xa5, 0x16, 0x65, 0xf6, 0x9f, 0xd9, 0x1c, 0x03,
	0x37, 0xa7, 0x08, 0x27, 0xab, 0x72, 0x3f, 0xa9, 0x4b, 0xba, 0xc0, 0x60, 0xb3, 0x34, 0xcb, 0x72,
	0xe6, 0xbb, 0x6f, 0x4d, 0x23, 0x6f, 0x30, 0x5d, 0x58, 0x53, 0xf4, 0x47, 0xbc, 0x43, 0x74, 0x28,
	0xea, 0x0d, 0xf9, 0x82, 0x51, 0x2b, 0xe1, 0xb1, 0x41, 0x6e, 0x71, 0xb6, 0xdb, 0xeb, 0xb3, 0x7f,
	0xfc, 0x16, 0x38, 0xad, 0xb3, 0xd0, 0x1c, 0x61, 0x93, 0x47, 0x29, 0x8a, 0xb8, 0x03, 0x39, 0x9e,
	0x70, 0x9b, 0xa9, 0xf4, 0x28, 0x41, 0xb8, 0xa7, 0x47, 0x11, 0x77, 0x40, 0xc6, 0x01, 0xbb, 0x56,
	0x7a, 0x0f, 0x82, 0x9e, 0x81, 0x66, 0xd7, 0x1d, 0x22, 0xfe, 0x03, 0x28, 0x9e, 0x72, 0x97, 0x87,
	0xf4, 0xe8, 0x1e, 0xc3, 0x37, 0xfd, 0x99, 0x35, 0x17, 0xce, 0xb9, 0x65, 0x3f, 0xe2, 0x83, 0x9f,
	0x93, 0x5e, 0x22, 0xde, 0x03, 0xf7, 0x40, 0x9e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x27, 0xf2,
	0x45, 0x34, 0x2e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CtrlClient is the client API for Ctrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CtrlClient interface {
	// Register TurnTable
	RegistTT(ctx context.Context, in *TTRegistRequest, opts ...grpc.CallOption) (*TTRegistResult, error)
	// Get controll of TurnTable
	GetTTCmd(ctx context.Context, in *GetTTCmdRequest, opts ...grpc.CallOption) (Ctrl_GetTTCmdClient, error)
	// Register Controller
	RegistCtrl(ctx context.Context, in *CtrlRegistRequest, opts ...grpc.CallOption) (*CtrlRegistResult, error)
	// Command
	SendTTCmd(ctx context.Context, opts ...grpc.CallOption) (Ctrl_SendTTCmdClient, error)
}

type ctrlClient struct {
	cc *grpc.ClientConn
}

func NewCtrlClient(cc *grpc.ClientConn) CtrlClient {
	return &ctrlClient{cc}
}

func (c *ctrlClient) RegistTT(ctx context.Context, in *TTRegistRequest, opts ...grpc.CallOption) (*TTRegistResult, error) {
	out := new(TTRegistResult)
	err := c.cc.Invoke(ctx, "/Ctrl/RegistTT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctrlClient) GetTTCmd(ctx context.Context, in *GetTTCmdRequest, opts ...grpc.CallOption) (Ctrl_GetTTCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ctrl_serviceDesc.Streams[0], "/Ctrl/GetTTCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &ctrlGetTTCmdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ctrl_GetTTCmdClient interface {
	Recv() (*TTCmd, error)
	grpc.ClientStream
}

type ctrlGetTTCmdClient struct {
	grpc.ClientStream
}

func (x *ctrlGetTTCmdClient) Recv() (*TTCmd, error) {
	m := new(TTCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ctrlClient) RegistCtrl(ctx context.Context, in *CtrlRegistRequest, opts ...grpc.CallOption) (*CtrlRegistResult, error) {
	out := new(CtrlRegistResult)
	err := c.cc.Invoke(ctx, "/Ctrl/RegistCtrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ctrlClient) SendTTCmd(ctx context.Context, opts ...grpc.CallOption) (Ctrl_SendTTCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ctrl_serviceDesc.Streams[1], "/Ctrl/SendTTCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &ctrlSendTTCmdClient{stream}
	return x, nil
}

type Ctrl_SendTTCmdClient interface {
	Send(*TTCmdRequest) error
	CloseAndRecv() (*TTCmdResult, error)
	grpc.ClientStream
}

type ctrlSendTTCmdClient struct {
	grpc.ClientStream
}

func (x *ctrlSendTTCmdClient) Send(m *TTCmdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ctrlSendTTCmdClient) CloseAndRecv() (*TTCmdResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TTCmdResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CtrlServer is the server API for Ctrl service.
type CtrlServer interface {
	// Register TurnTable
	RegistTT(context.Context, *TTRegistRequest) (*TTRegistResult, error)
	// Get controll of TurnTable
	GetTTCmd(*GetTTCmdRequest, Ctrl_GetTTCmdServer) error
	// Register Controller
	RegistCtrl(context.Context, *CtrlRegistRequest) (*CtrlRegistResult, error)
	// Command
	SendTTCmd(Ctrl_SendTTCmdServer) error
}

// UnimplementedCtrlServer can be embedded to have forward compatible implementations.
type UnimplementedCtrlServer struct {
}

func (*UnimplementedCtrlServer) RegistTT(ctx context.Context, req *TTRegistRequest) (*TTRegistResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistTT not implemented")
}
func (*UnimplementedCtrlServer) GetTTCmd(req *GetTTCmdRequest, srv Ctrl_GetTTCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTTCmd not implemented")
}
func (*UnimplementedCtrlServer) RegistCtrl(ctx context.Context, req *CtrlRegistRequest) (*CtrlRegistResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistCtrl not implemented")
}
func (*UnimplementedCtrlServer) SendTTCmd(srv Ctrl_SendTTCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTTCmd not implemented")
}

func RegisterCtrlServer(s *grpc.Server, srv CtrlServer) {
	s.RegisterService(&_Ctrl_serviceDesc, srv)
}

func _Ctrl_RegistTT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTRegistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtrlServer).RegistTT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ctrl/RegistTT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtrlServer).RegistTT(ctx, req.(*TTRegistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctrl_GetTTCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTTCmdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CtrlServer).GetTTCmd(m, &ctrlGetTTCmdServer{stream})
}

type Ctrl_GetTTCmdServer interface {
	Send(*TTCmd) error
	grpc.ServerStream
}

type ctrlGetTTCmdServer struct {
	grpc.ServerStream
}

func (x *ctrlGetTTCmdServer) Send(m *TTCmd) error {
	return x.ServerStream.SendMsg(m)
}

func _Ctrl_RegistCtrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtrlRegistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CtrlServer).RegistCtrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ctrl/RegistCtrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CtrlServer).RegistCtrl(ctx, req.(*CtrlRegistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ctrl_SendTTCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CtrlServer).SendTTCmd(&ctrlSendTTCmdServer{stream})
}

type Ctrl_SendTTCmdServer interface {
	SendAndClose(*TTCmdResult) error
	Recv() (*TTCmdRequest, error)
	grpc.ServerStream
}

type ctrlSendTTCmdServer struct {
	grpc.ServerStream
}

func (x *ctrlSendTTCmdServer) SendAndClose(m *TTCmdResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ctrlSendTTCmdServer) Recv() (*TTCmdRequest, error) {
	m := new(TTCmdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ctrl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ctrl",
	HandlerType: (*CtrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistTT",
			Handler:    _Ctrl_RegistTT_Handler,
		},
		{
			MethodName: "RegistCtrl",
			Handler:    _Ctrl_RegistCtrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTTCmd",
			Handler:       _Ctrl_GetTTCmd_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendTTCmd",
			Handler:       _Ctrl_SendTTCmd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ctrl.proto",
}
